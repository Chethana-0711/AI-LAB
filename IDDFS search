graph = {
    'A': ['B', 'C'],
    'B': ['D', 'E'],
    'C': ['F', 'G'],
    'D': ['H'],
    'E': ['I'],
    'F': [],
    'G': [],
    'H': [],
    'I': []
}


def DLS(node, goal, limit, visited, path):
    visited.append(node) 

    if node == goal:
        return True, path + [node]

    if limit <= 0:
        return False, None

    for neighbor in graph.get(node, []):
        found, result = DLS(neighbor, goal, limit-1, visited, path + [node])
        if found:
            return True, result

    return False, None


def IDDFS(start, goal, max_depth):
    for depth in range(max_depth + 1):
        visited = []
        print(f"\nDepth Limit = {depth}")
        found, path = DLS(start, goal, depth, visited, [])
        print("Visited :", " - ".join(visited))
        if found:
            return path, depth
    return None, -1


if __name__ == "__main__":
    start_node = 'A'
    goal_node = 'G'
    max_depth = 3

    path, depth = IDDFS(start_node, goal_node, max_depth)

    if path:
        print("\nGoal found at depth:", depth)
        print("Solution Path:", " -> ".join(path))
    else:
        print("\ngoal not found within depth limit.")
