from copy import deepcopy


goal_state = [[1, 2, 3],
              [4, 5, 6],
              [7, 8, 0]]


def misplaced_tiles(state, goal=goal_state):
    count = 0
    for i in range(3):
        for j in range(3):
            if state[i][j] != 0 and state[i][j] != goal[i][j]:
                count += 1
    return count

def manhattan_distance(state, goal=goal_state):
    distance = 0
    pos = {}
  
    for i in range(3):
        for j in range(3):
            pos[goal[i][j]] = (i, j)

    for i in range(3):
        for j in range(3):
            val = state[i][j]
            if val != 0:
                x, y = pos[val]
                distance += abs(i - x) + abs(j - y)
    return distance


def find_blank(state):
    for i in range(3):
        for j in range(3):
            if state[i][j] == 0:
                return i, j

def get_neighbors(state):
    neighbors = []
    x, y = find_blank(state)
    directions = [(0,1),(0,-1),(1,0),(-1,0)] 
    for dx, dy in directions:
        nx, ny = x+dx, y+dy
        if 0 <= nx < 3 and 0 <= ny < 3:
            new_state = deepcopy(state)
            new_state[x][y], new_state[nx][ny] = new_state[nx][ny], new_state[x][y]
            neighbors.append(new_state)
    return neighbors

def print_state(state):
    for row in state:
        print(row)
    print()


def DLS(state, goal, limit, path, visited):
    if state == goal:
        return True, path

    if limit == 0:
        return False, None

    for neighbor in get_neighbors(state):
        tup = tuple(map(tuple, neighbor))  
        if tup not in visited:
            visited.add(tup)
            found, result = DLS(neighbor, goal, limit-1, path + [neighbor], visited)
            if found:
                return True, result
    return False, None

def IDDFS(start, goal):
    depth = 0
    while True:
        visited = {tuple(map(tuple, start))}
        found, path = DLS(start, goal, depth, [start], visited)
        if found:
            return path, depth
        depth += 1


if __name__ == "__main__":
    initial_state = [[1, 2, 3],
                     [4, 6, 0],
                     [7, 5, 8]]  

    print("Initial State:")
    print_state(initial_state)

    print("Goal State:")
    print_state(goal_state)

    print("Misplaced Tiles Heuristic (h1):", misplaced_tiles(initial_state))
    print("Manhattan Distance Heuristic (h2):", manhattan_distance(initial_state))

    path, depth = IDDFS(initial_state, goal_state)

    print("\nSolution found at depth:", depth)
    print("Solution Path:")

    step = 0
    for state in path:
        print("Step", step)
        print_state(state)
        step += 1
